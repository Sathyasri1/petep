/*
 * PETEP Gradle Build
 */

plugins {
    id 'java-library'
    id 'java'
    id 'eclipse'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
  	id "org.sonarqube" version "2.8"
}

repositories {
    jcenter()
}

javafx { 
    version = "11.0.2"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web' ]
}

dependencies {
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    
    testImplementation('org.junit.jupiter:junit-jupiter:5.4.2')
}

// UTF-8 encoding
compileJava.options.encoding = 'UTF-8'

mainClassName='com.warxim.petep.Main'

// Copy extensions from their build/libs/ to projects ext/
task copyExtensions (type: Copy, dependsOn: gradle.includedBuilds*.task(':jar')) {
	into 'ext/' 
	
	gradle.includedBuilds.each { build -> 
		println 'Moving extension "' + build.rootDirectory + '" to ext/ directory.'
		from build.rootDirectory.path + '/build/libs/'
	}
}

// Run task
run {
	if (gradle.ext.wizard) {
		args = []
	} else {
		if (gradle.GUI) {
			args = [gradle.ext.testProjectDirectory]
		} else {
			args = [gradle.ext.testProjectDirectory, "--nogui"]
		}
	}
    dependsOn gradle.includedBuilds*.task(':jar'), copyExtensions
}

// Export com.sun.javafx.css (for css editing)
application {
    applicationDefaultJvmArgs =  [
        "--add-opens=javafx.graphics/com.sun.javafx.css=ALL-UNNAMED"
    ]
}

// Create jar library for extensions
task petepLibJar(type: Jar) {
    println "Creating jar library"
    includes = includedFiles(sourceSets.main.allSource.files)
    baseName = "PetepLib"
	with jar
}

// Create fat jar
jar {
    from(sourceSets.main.output) {  
	    println "Creating fat jar"
	    manifest {
	    	attributes 'Main-Class': "$mainClassName"
	    }
	    baseName = 'PETEP'
	    from {
        	configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    	}
    }
    duplicatesStrategy = 'exclude'
}

// Include only @PetepAPI classes to jar
def includedFiles(Collection<File> files) {
	List<String> included = new ArrayList<>()
	files.each { file ->
	if (file.isDirectory()) {
		excludedFiles(Arrays.asList(file.listFiles()))
	} else {
		if (file.text.contains("@PetepAPI") || file.text.contains("<!-- PetepAPI -->")) {
			String temp = projectDir.toURI().relativize(
			file.toURI()).toString()
				.replace(".java", ".class")
				.replace("src/main/java/", "")
				.replace("src/main/resources/", "")
       		included += temp
       		println "- including: " + temp
		}
   	}
 	}
 	return included
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

distributions {
    main {
        contents {
   			exclude 'PETEP', 'PETEP.bat'
            
            from("LICENSE.md") {
                into ""
            }
    
            from(petepLibJar) {
                into "api"
            }
            
            from("ext") {
                into "ext"
            }
                        
            from("project_template") {
                into "project_template"
            }
        }
    }
}