/*
 * PETEP Gradle Build
 */

plugins {
    id 'java-library'
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.sonarqube' version '3.0'
}

repositories {
    mavenCentral()
}

javafx {
    version = "11.0.2"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web']
}

java {
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'
    implementation 'org.graalvm.sdk:graal-sdk:22.1.0.1'
    implementation 'org.graalvm.sdk:polyglot-tck:22.1.0.1'
    implementation 'org.graalvm.truffle:truffle-api:22.1.0.1'
    implementation 'org.graalvm.js:js:22.1.0.1'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
    testImplementation 'org.testng:testng:7.6.0'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.mockito:mockito-inline:4.6.1'
}

// UTF-8 encoding
compileJava.options.encoding = 'UTF-8'

mainClassName = 'com.warxim.petep.Main'

// Copy extensions from their build/libs/ to projects ext/
task copyExtensions(type: Copy, dependsOn: gradle.includedBuilds*.task(':jar')) {
    into 'ext/'

    gradle.includedBuilds.each { build ->
        println 'Moving extension "' + build.rootDirectory + '" to ext/ directory.'
        from build.rootDirectory.path + '/build/libs/'
    }
}

// Run task
run {
    if (gradle.ext.wizard) {
        args = []
    } else {
        if (gradle.GUI) {
            args = [gradle.ext.testProjectDirectory]
        } else {
            args = [gradle.ext.testProjectDirectory, "--nogui"]
        }
    }
    dependsOn gradle.includedBuilds*.task(':jar'), copyExtensions
}
apply plugin: 'application'

// Export com.sun.javafx.css (for css editing)
application {
    applicationDefaultJvmArgs = [
            "--add-opens=javafx.graphics/com.sun.javafx.css=ALL-UNNAMED"
    ]
    executableDir = ''
}

// Create jar library for extensions
task petepLibJar(type: Jar) {
    println "Creating jar library"
    includes = includedFiles(sourceSets.main.allSource.files)
    archiveBaseName = "petep-lib"
    with jar
}

task petepLibSourcesJar(type: Jar, dependsOn: classes) {
    archiveBaseName = "petep-lib-sources"
    includes = includedSourceFiles(sourceSets.main.allSource.files)
    from sourceSets.main.allSource
}

// Create fat jar
jar {
    from(sourceSets.main.output) {
        println "Creating fat jar"
        manifest {
            attributes 'Main-Class': "$mainClassName"
        }
        archiveBaseName = 'petep'
    }
    duplicatesStrategy = 'exclude'
}

/**
 * Include only Java @PetepAPI classes to jar and FXML files with <!-- PetepAPI -->
 */
def includedFiles(Collection<File> files) {
    List<String> included = new ArrayList<>()
    files.each { file ->
        if (file.name.endsWith(".java") && file.text.contains("@PetepAPI") ) {
            String temp = projectDir.toURI().relativize(
                    file.toURI()).toString()
                    .replace(".java", "**.class") // Include all
                    .replace("src/main/java/", "")
            included += temp
            println "- including: " + temp
        } else if (file.name.endsWith(".fxml") && file.text.contains("<!-- PetepAPI -->")) {
            String temp = projectDir.toURI().relativize(
                    file.toURI()).toString()
                    .replace("src/main/resources/", "")
            included += temp
            println "- including: " + temp
        }
    }
    return included
}

/**
 * Include only Java @PetepAPI annotated
 */
def includedSourceFiles(Collection<File> files) {
    List<String> included = new ArrayList<>()
    files.each { file ->
        if (file.name.endsWith(".java") && (file.text.contains("@PetepAPI") || file.text.contains("@interface PetepAPI")) ) {
            included += projectDir.toURI()
                    .relativize(file.toURI())
                    .toString()
                    .replace("src/main/java/", "")
        }
    }
    return included
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

distributions {
    main {
        distributionBaseName = "petep"
        contents {
            from("LICENSE.md") {
                into ""
            }

            from("CHANGELOG.md") {
                into ""
            }

            from(petepLibJar) {
                into "api"
            }

            from(petepLibSourcesJar) {
                into "api"
            }

            from("ext") {
                into "ext"
            }

            from("presets") {
                into "presets"
            }

            from("project_template") {
                into "project_template"
            }

            from("scripts") {
                into ""
            }

            startScripts.onlyIf {false}
        }
    }
}

test {
    useTestNG()
}

artifacts {
    archives petepLibSourcesJar
}